% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aipw.att.R
\name{aipw.att}
\alias{aipw.att}
\title{Deep Neural Network AIPW Estimator for ATT}
\usage{
aipw.att(
  Y,
  T,
  X_t,
  X = NULL,
  rescale_treated = TRUE,
  rescale_outcome = TRUE,
  model = NULL,
  optimizer = NULL,
  loss = NULL,
  epochs = 256,
  batch_size = 200,
  compile_outcome_model = NULL,
  fit_outcome_model = NULL,
  compile_propensity_score = NULL,
  fit_propensity_score = NULL,
  verbose = TRUE,
  debugging = FALSE,
  propensity_score = NULL,
  use_scalers = TRUE,
  do_standardize = NULL,
  truncate_ps = TRUE
)
}
\arguments{
\item{Y}{is a numerical vector of observed outcomes of length \code{n}.}

\item{T}{is a logical vector of treatment statuses of length \code{n}.}

\item{X_t}{is the set of covariates. If covariates are time series, it should be a list of \code{k} different \code{n * p} matrixes. Here \code{p} is the length of the time series, and \code{k} is the number of different covariates. If covariates are single valued, it should be a matrix of size \code{n * k}.}

\item{X}{if there are some single value covariates besides the time series, it can be considered here. It has to be \code{k’ * n} matrix. The default value is \code{Null}.}

\item{rescale_treated}{In the case that scalers are used, determine if the scaling makes all covariates zero mean or just treated once.}

\item{rescale_outcome}{determine if scaling the outcome values to have zero mean and one standard deviation. Default is \code{True}.}

\item{model}{It can be defined by a vector of size 3 (for ate function) or size 2 (for att function), or it can be just one model. In the latter case, that one model will be used for all nuisance models. The default value for Model is \code{Null}, and in this case, the functions will use a specific predefined network.  Each model should be defined using the package Keras.}

\item{optimizer}{can be a vector contain two optimizers or can be just one. In the presence of two optimizers, the first one will be used for the outcome models, and the second one will be used for the propensity score estimation. The default is \code{Null}, and in this case, adam optimizer is used.}

\item{loss}{can be a vector contain two loss functions or can be just one. In the presence of two functions, the first one will be used for the outcome models, and the second one will be used for the propensity score estimation. The default is \code{Null}, and in this case, mean square error and cross-entropy error are used for the outcome models and propensity score, respectively.}

\item{epochs}{default value is 256. A vector is also acceptable.}

\item{batch_size}{default value is 200. A vector is also acceptable.}

\item{compile_outcome_model}{a list of parameters and their values can be used to add to Keras compile function when it is used for the outcome models. the list can be used to overwrite existing parameters, so it would be considered as a way to run Keras in a completely arbitrary way.}

\item{fit_outcome_model}{a list of parameters and their values can be used to add to Keras fit function when it is used for the outcome models. the list can be used to overwrite existing parameters.}

\item{compile_propensity_score}{a list of parameters and their values can be used to add to Keras compile function when it is used for the propensity score. the list can be used to overwrite existing parameters, so it would be considered as a way to run Keras in a completely arbitrary way.}

\item{fit_propensity_score}{a list of parameters and their values can be used to add to Keras fit function when it is used for the propensity score. the list can be used to overwrite existing parameters.}

\item{verbose}{can be a vector of logical variables or just one. That will control the verbosity of the fitting process.}

\item{debugging}{is a logical variable, and if it is \code{True}, the function will return the estimated vectors for the outcome models and the propensity score.}

\item{propensity_score}{can be used to determine a pre-estimated propensity score. By using it, the functions will not make the neural network for estimating the propensity score, and the predefined values will be used in the final estimation.}

\item{use_scalers}{in the case that covariates are times series determine if to use the mean and sd of times series after the standardization and other single value covariates in an additional parallel neural network or not. Default is \code{True}.}

\item{do_standardize}{determine if standardize the time series row-wise or column-wise or not at all. Options are ‘column’ and ‘row’.  Default is \code{Null}.}

\item{truncate_ps}{determines whether a truncation over the estimation of propensity scores should be considered or not.}
}
\value{
ATT AIPW Estimate and Inference of ATE
}
\description{
Deep Neural Network AIPW Estimator for ATT
}
\examples{

library(DNNcausal)
# simulate covariates, treatment assignment mechanism, and potential outcomes.
x = matrix(rnorm(100 * 5), nrow = 100)
p = 1/ (1 + exp(0.1*( (x[,5] - x[,1])^2 + (x[,4] - x[,2])^2 - x[,3]^2)))
T = rbinom(100,1,p)
m1 = 1 + tan(0.1*( (x[,5] - x[,1])^2 + (x[,4] - x[,2])^2 - x[,3]^2)) + rnorm(100,sd = 0.1)
m0 = tan(0.1*( (x[,5] - x[,1])^2 + (x[,4] - x[,2])^2 - x[,3]^2)) + rnorm(100,sd = 0.1)
# obtain the observed outcome
y = T*m1 + (1-T)*m0
# call the ATT estimator function
aipw.att(y,T,x)




}
